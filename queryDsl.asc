= 객체지향 쿼리 소개

  객체와 관계형 데이터베이스를 매핑해주는 ORM(Object Relational Mapping)프레임워크의
  기술 표준인 JPA(Java Persistent API)를 사용하는 쿼리 언어의 종류와 기술에 대해서 소개한다.

== JPQL (Java Persistence Query language)

  SQL :  데이터베이스 중심 쿼리
  JPQL : 엔티티 객체를 중심으로 하는 객체지향 쿼리

=== 이건 왜 써야 하는거지?

근간이 되는 객체지향 쿼리 언어이다. 앞으로 소개할 Criteria, QueryDsl, Native SQL은 결국 JPQL을 편리하게 사용하도록 돕는 기술이므로 JPA를 다루는 개발자라면 JPQL은 필수로 학습해야 한다.

 JPA는 이 JPQL을 분석한 다음 적절한 SQL을 만들어 데이터베이스를 조회한후 엔티티 겍체를 생성해서 반환한다.
 다양한 데이터 저장소에 대한 접근을 추상화

 타입을 철저히 체크하여 Type-safe


=== 일반적인 조회

```java
[JPQL]
 SELECT e.*
 FROM Employee e

[실행된 SQL]
 SELECT e
 FROM Employee e
```

=== JPQL 내부조인(inner join)

```java
[JPQL]
SELECT p
FROM Employee e JOIN e.phones p

[실행된 SQL]
SELECT p.id, p.phone_num, p.type, p.emp_id
FROM emp e, phone p
WHERE e.id= p.emp_id

```
=== JPQL 외부조인(Outer join)

```java
[JPQL]
SELECT e, d
FROM Employee e LEFT JOIN e.department d

[실행된 SQL]
SELECT
  e.id, e.name, e.salary, e.manager_id, e.dept_id, e.address_id,d.id, d.name
FROM employee e LEFT OUTER JOIN department d
ON (d.id= e.department_id)


 - jpa 2.1버전부터 outer join에 조건을 추가하는 기능이 추가되었다.

[JPQL]
SELECT e, d
FROM Employee e LEFT JOIN e.department d
    ON d.name LIKE 'QA%'

[실행된 SQL]
SELECT e.id, e.name, e.salary, e.department_id, e.manager_id, e.address_id,
    d.id, d.name
FROM employee e left outer join department d
    ON ((d.id= e.department_id) and (d.name like 'QA%'))

```

=== JPQL 페치조인(Fetch join)

  - sql의 조인이 아닌 jpql의 성능 최적화를 위해 제공되는 기능
  - 연관된 엔티티나 컬렉션을 한 번에 같이 조회하는 기능

```java
[JPQL]
SELECT e
FROM Employee e JOIN FETCH e.address
#여기서 e.address 가 경로식(fetch)이다.

[실행된 SQL]
SELECT e.*, a.*
FROM Employee e JOIN e.address a

```
SELECT e로 Employee테이블의 엔티티만 조회 하였지만, 실행된 sql에서는 e.*, a.* 으로,
연관된 address테이블도 함께 조회가 된것을 볼수 있다.
지연로딩을 설정하였다 하더라도 연관된 address 엔티티는 프록시가 아닌 실제 엔티티이므로,
영속성 컨텍스트에서 분리되어 준영속 상태가 되어도 연관된 팀을 조회할수 있다.

image::images/1-1.gif[ title=퍼시스턴트 객체의 영속성 생명주기 출처:(http://www.slideshare.net/)]

- @OneToMany : 기본값=지연로딩(LAZY)
- @ManyToOne : 기본값=즉시로딩(EAGER)

=== JPQL 이너 조인 (inner join = 묵시적 조인)


```java
[JPQL]
select o.member.team
from Order o
where o.product.name = 'A' and o.address.city = 'seoul'

[실행된 SQL]
select t.*
from Order o
inner join Member m on o.member_id=m.id
inner join Team t on o.team=t.id
inner join Product p on o.product_id=p.id
where p.name = 'A' and o.city = 'seoul'
```

멋 모르고 개발하면 대박이다....ㅋㅋㅋㅋ

== Criteria

  - JPQL 생성하는 빌더 클래스 API
  - 런타임 시점에 오류가 발생하지 않고, 컴파일 시점에 오류 발견
  - IDE를 사용하면 쿼리 자동완선 기능 지원

=== 일반적인 조회 흐름

```java
[기존 SQL]
  SELECT e
  FROM Employee e
  WHERE e.name = 'John Smith'

[Criteria SQL]
CriteriaBuilder cb = em.getCriteriaBuilder();
CriteriaQuery<Employee> c = cb.createQuery(Employee.class);
Root<Employee> emp = c.from(Employee.class);
c.select(emp);
```

  1)EntityManager나 EntityManagerFactory에서 CriteriaBuilder를 얻은후
  2)getCriteriaBuilder()를 통해  createQuery 이후반환타입 지정.
  3)form절 생성 이때 반환된 emp값은 조회의 시작점 이라는 의미로 쿼리루트라 함.
  4)select절을 생성. 이후는 JPQL과 같음.

=== group by

```java
[ 기존 JPQL ]
select min(s.pint),s.pbyte from SimpleBean s group by s.pbyte

[ Criteria SQL ]
CriteriaBuilder criteriaBuilder = entityManager.getCriteriaBuilder();
CriteriaQuery<Object> criteriaQuery = criteriaBuilder.createQuery();
Root from = criteriaQuery.from(SimpleBean.class);

Expression minExpression = criteriaBuilder.min(from.get("pint"));
Path pbytePath = from.get("pbyte");
CriteriaQuery<Object> select = criteriaQuery.multiselect(minExpression, pbytePath);

CriteriaQuery<Object> groupBy = select.groupBy(pbytePath);

TypedQuery<Object> typedQuery = entityManager.createQuery(select);
List listActual = typedQuery.getResultList();
```

=== fetch join query

```java
[기존 SQL]
select s.*
from
  OrderItem s join product p
where s.product = p.category and p.category='cat';

# JPQL로 풀어보면
long category=200L;
Query query = entityManager.createQuery("select s from OrderItem s " +
        "join fetch s.product where s.product.category=:cat");
query.setParameter("cat", category);
List<OrderItem> list = query.getResultList();


[Criteria SQL]
CriteriaBuilder criteriaBuilder = entityManager.getCriteriaBuilder();
CriteriaQuery<Object> criteriaQuery = criteriaBuilder.createQuery();
Root<OrderItem> from = criteriaQuery.from(OrderItem.class);
Path<Object> path = from.join("product").get("category");

from.fetch("product"); //FETCH product

CriteriaQuery<Object> select = criteriaQuery.select(from);
select.where(criteriaBuilder.equal(path, category));

TypedQuery<Object> typedQuery = entityManager.createQuery(select);
List<Object> resultList = typedQuery.getResultList();
assertEqualsList(list, resultList);

```




== QueryDsl

  - JPQL 생성하는 빌더 클래스 API
  - Criteria에 비해 단순하고, 사용하기 편함
  - 한글 레퍼런스문서 주소 ( http://www.querydsl.com/static/querydsl/4.0.1/reference/ko-KR/html_single )

=== 환경설정

```java
<querydsl.version>3.6.3</querydsl.version>

<dependency>
	<groupId>com.mysema.querydsl</groupId>
	<artifactId>querydsl-apt</artifactId>
	<version>${querydsl.version.version}</version>
	<scope>provided</scope>
</dependency>

<dependency>
	<groupId>com.mysema.querydsl</groupId>
	<artifactId>querydsl-jpa</artifactId>
	<version>${querydsl.version.version}</version>
</dependency>

# 쿼리용 쿨래스 생성을 위한 코드추가
<build>
	  <plugins>
	    <plugin>
	      <groupId>com.mysema.maven</groupId>
	      <artifactId>apt-maven-plugin</artifactId>
	      <version>1.0.6</version>
	      <executions>
	        <execution>
	          <goals>
	            <goal>process</goal>
	          </goals>
	          <configuration>
	            <outputDirectory>target/generated-sources/java</outputDirectory>
	            <processor>com.mysema.query.apt.jpa.JPAAnnotationProcessor</processor>
	          </configuration>
	        </execution>
	      </executions>
	    </plugin>
	  </plugins>
</build>
```

image::images/1-2.jpg[ title=Q 쿼리타입 생성 ]

 mvn compile 을 입력하면 outputDirectory에 지정한 target위치에 Q로 시작하는 쿼리타입들이 생성된다.
 이클립스 LUNA버전 이상을 사용하면 빌드패스를 따로 지정 안해줘도 상관 없다.

=== 기본 쿼리

  1)JPAQuery 인스턴스를 사용
  2)사용할 쿼리타입(Q)을 생성한후 생성자에는 별칭을 부여
  3)이후 FROM, WHERE, ORDERBY 등은 아래 소스로 확인

```java

QCustomer customer = QCustomer.customer;
JPAQuery query = new JPAQuery(entityManager);
Customer bob = query.from(customer)
  .where(customer.firstName.eq("Bob"))
  .uniqueResult(customer);




```

=== 조인

```java

QCat cat = QCat.cat;
QCat mate = new QCat("mate");
QCate kitten = new QCat("kitten");
query.from(cat)
    .innerJoin(cat.mate, mate)
    .leftJoin(cat.kittens, kitten)
    .list(cat);



```

=== 서브쿼리

```java
QCustomer customer = QCustomer.customer;
QCustomer customer2 = new QCustomer("customer2");
query.from(customer).where(
  customer.status.eq(new SQLSubQuery().from(customer2).unique(customer2.status.max()))
  .list(customer.all())

```

=== 정렬 & 페이징

```java
query.form(item)
    .where(item.title.like("*"))
    .orderBy(item.title.asc(), item.year.desc())
    .offset(10).limit(10)
    .list(item);

```

=== 단일행 리턴방법

```java

public AdminContents getContentsById(int cntsNo) {
    return adminContentsRepository.findOne(QAdminContents.adminContents.seq.eq(cntsNo)
            .and(QAdminContents.adminContents.statSeq.loe(Status.EXPOSE_PIVOT)));
}

```
=== 복수행 리턴방법

```java

public Page<AdminContents> getContentsList(int page, int pageSize, Board board, SortType sortType) {
    Sort sort = new Sort(sortType.getDirection(), sortType.getFieldName()).and(new Sort(SortType.DEFAULT_SUB_PIVOT.getDirection(), SortType.DEFAULT_SUB_PIVOT.getFieldName()));
    PageRequest pageRequest = new PageRequest(page, pageSize, sort);

    return adminContentsRepository.findAll(
            QAdminContents.adminContents.board.seq.eq(board.getSeq())
                    .and(QAdminContents.adminContents.statSeq.loe(Status.EXPOSE_PIVOT)), pageRequest);
}

```

== Native SQL

  - SQL을 직접사용 가능

  표준화 되어있지 않은 특정 데이터베이스에서만 동작하는 CONNECT BY나 SQL힌트같은 쿼리 작성시 사용
  Native SQL은 보통 JPQL로 작성하기 어려운 복잡한 SQL쿼리를 작성 하거나 SQL을 최적화해서 데이터베이스 성능을
  향상할 때 사용한다.


```java

- service.java
@Override
public List<PerfTest> getAll(Date start, Date end, String region) {
  return perfTestRepository.findAllByCreatedTimeAndRegion(start, end, region);
}

- repository.java
@Query("select p from PerfTest  p where p.startTime between ?1 and ?2 and region=?3")
List<PerfTest> findAllByCreatedTimeAndRegion(Date start, Date end, String region);

```

=== find() vs JPQL

  em.find() 메소드와 JPQL동작에 차이점 숙지

  - em.find() 메소드는 영속성 컨텍스트에서 엔티티를 먼저 찾고 없으면 데이터베이스에서 조회한다.
  따라서 영속성 컨텍스트에 있으면 메모리에서 바로 찾는다는 성능상 이점이 있다.

  - JPQL은 항상 데이터베이스에서 SQL을 실행하여 결과를 조회한다.
  JPQL을 분석하여 영속성 컨텍스트를 조회하는 것은 쉬운일이 아니였을 것이다. 그러므로 쿼리한 결과값을 사용한다.
  이전에 조회한 같은 결과값 엔티티가 있다면, 새로 검색한 엔티티는 버리고 기존 엔티티를 반환 한다.






Copyright (C) 2016 NHN Technology Service.
